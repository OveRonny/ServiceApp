@page "/consumptionrecord/{id:int}"
@page "/consumptionrecord"
@page "/consumptionrecord/create/vehicle/{vehicleId:int}"
@inject IConsumptionRecordService ConsumptionRecordService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3>Forbruk</h3>

<EditForm Model="consumptionRecord" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <VehicleDropdown @bind-SelectedVehicleId="consumptionRecord.VehicleId" />
    </div>

    <div class="mb-3">
        <label for="date" class="form-label" >Dato</label>
        <InputDate id="date" class="form-control" @bind-Value="consumptionRecord.Date" />
        <ValidationMessage For="@(() => consumptionRecord.Date)" />
    </div>
    <div class="mb-3">
        <label for="dieselAdded" class="form-label">Antall liter</label>
        <InputText id="dieselAdded" class="form-control" @bind-Value="dieselAddedString" />
        @if (!string.IsNullOrEmpty(dieselAddedError))
        {
            <div class="text-danger">@dieselAddedError</div>
        }
        <ValidationMessage For="@(() => consumptionRecord.DieselAdded)" />
    </div>
    <div class="mb-3">
        <label for="DieselPricePerLiter" class="form-label">Pris</label>
        <InputNumber id="DieselPricePerLiter" class="form-control" @bind-Value="consumptionRecord.DieselPricePerLiter" />
        <ValidationMessage For="@(() => consumptionRecord.DieselPricePerLiter)" />
    </div>
    <div class="mb-3">
        <label for="Mileage" class="form-label">Kilometer</label>
        <InputNumber id="Mileage" class="form-control" @bind-Value="consumptionRecord.Mileage" />
        <ValidationMessage For="@(() => consumptionRecord.Mileage)" />
    </div>

    <button type="submit" class="btn btn-primary">Lagre</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Avbryt</button>
    @if (Id > 0)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteConsumption">Slett</button>
    }  

</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int VehicleId { get; set; }

    private ConsumptionRecordModel consumptionRecord = new ConsumptionRecordModel();

    private string dieselAddedString
    {
        get => consumptionRecord.DieselAdded == 0 ? string.Empty : consumptionRecord.DieselAdded.ToString("G", System.Globalization.CultureInfo.CurrentCulture);
        set
        {
            dieselAddedError = string.Empty;
            if (string.IsNullOrWhiteSpace(value))
            {
                consumptionRecord.DieselAdded = 0;
                return;
            }
            if (value.Contains('.'))
            {
                dieselAddedError = "Bruk komma (,) som desimaltegn, ikke punktum (.)";
                return;
            }
            if (decimal.TryParse(value, System.Globalization.NumberStyles.Number, System.Globalization.CultureInfo.CurrentCulture, out var d))
            {
                consumptionRecord.DieselAdded = d;
            }
            else
            {
                dieselAddedError = "Ugyldig tallformat. Bruk komma (,) som desimaltegn.";
            }
        }
    }
    private string dieselAddedError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {            
            var result  = await ConsumptionRecordService.GetConsumptionRecordByIdAsync(Id);
            if (result != null)
            {
                consumptionRecord = result;
			}
        }
        else if (VehicleId > 0)
        {            
            consumptionRecord.VehicleId = VehicleId;
        }
        else
        {            
            consumptionRecord = new ConsumptionRecordModel();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(dieselAddedError))
            return;
        if (Id > 0)
        {
            await ConsumptionRecordService.UpdateConsumptionRecordAsync(consumptionRecord);
        }
        else
        {
            await ConsumptionRecordService.CreateConsumptionRecordAsync(consumptionRecord);
        }
        // Redirect to the list page or show a success message
        NavigatToConsumptionRecords();
    }

    private async Task DeleteConsumption()
    {
        if (Id > 0)
        {
            await ConsumptionRecordService.DeleteConsumptionRecordAsync(Id);
            NavigatToConsumptionRecords();
        }
    }

    private void Cancel()
    {
        NavigatToConsumptionRecords();
    }

    private void NavigatToConsumptionRecords()
    {
        VehicleId = consumptionRecord.VehicleId;
        NavigationManager.NavigateTo($"/consumptionrecords/{VehicleId}");
    }

}
