@page "/insurance"
@page "/insurance/{VehicleId:int}"
@inject IInsuranceService InsuranceService

<h3>Forsikring</h3>

<EditForm Model="policies" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

     <div class="mb-3">
        <VehicleDropdown @bind-SelectedVehicleId="policies.VehicleId" />
     </div>

    <div class="mb-3">
        <label for="policies" class="form-label">Firma</label>
        <InputText class="form-control" @bind-Value="policies.CompanyName" />
        <ValidationMessage For="@(() => policies.CompanyName)" />
    </div>
    <div class="mb-3">
        <label for="price" class="form-label">Pris</label>
        <InputNumber class="form-control" @bind-Value="policies.AnnualPrice" />
        <ValidationMessage For="@(() => policies.AnnualPrice)" />
    </div>
    <div class="mb-3">
        <label for="TraficInsurancePrice" class="form-label">Trafikkforsikringsavgift</label>
        <InputNumber class="form-control" @bind-Value="policies.TraficInsurancePrice" />
        <ValidationMessage For="@(() => policies.TraficInsurancePrice)" />
    </div>
    <div class="mb-3">
        <label for="Milage" class="form-label">Kilometer</label>
        <InputNumber class="form-control" @bind-Value="policies.AnnualMileageLimit" />
        <ValidationMessage For="@(() => policies.AnnualMileageLimit)" />
    </div>
    <div class="mb-3">
        <label for="Milage" class="form-label">Kilometer start</label>
        <InputNumber class="form-control" @bind-Value="policies.StartingMileage" />
        <ValidationMessage For="@(() => policies.StartingMileage)" />
    </div>  
    <div class="mb-3">
        <label for="RenewalDate" class="form-label">Start dato</label>
        <InputDate class="form-control" @bind-Value="policies.RenewalDate" />
        <ValidationMessage For="@(() => policies.RenewalDate)" />
    </div>

    <button type="submit" class="btn btn-primary">Lagre</button>
    <NavLink class="btn btn-secondary ms-2" href="/vehicles">Avbryt</NavLink>
    <button type="button" class="btn btn-danger float-end" @onclick="async () => await InsuranceService.DeleteInsurance(policies.Id)">Slett</button>
</EditForm>

@if (policies is not null && policies.AnnualMileageLimit > 0)
{
    <div class="card card-service policy-card mt-4">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div>
                    <h5 class="card-title mb-1">@policies.CompanyName</h5>
                    <small class="text-muted">
                        @(policies.RenewalDate.ToString("dd.MM.yyyy")) &rarr; @(policies.EndDate?.ToString("dd.MM.yyyy") ?? "-")
                    </small>
                </div>
                <span class="badge @StatusBadgeClass">
                    @(policies.IsActive ? "Aktiv" : "Inaktiv")
                </span>
            </div>

            <div class="row g-3 small policy-metrics">
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Grense</div>
                    <div class="fw-semibold">@policies.AnnualMileageLimit km</div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Brukt</div>
                    <div class="fw-semibold">@Used km</div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Gjenstår</div>
                    <div class="fw-semibold">@Remaining km</div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Utnyttelse</div>
                    <div class="fw-semibold">@UsedPercent %</div>
                </div>
            </div>
            <hr class="my-3" />

            <div class="row g-3 small policy-metrics">
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Årspris</div>
                    <div class="fw-semibold">@CurrencyFormatter.FormatKr(policies.AnnualPrice)</div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Trafikkavgift</div>
                    <div class="fw-semibold">@CurrencyFormatter.FormatKr(policies.TraficInsurancePrice)</div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Total</div>
                    <div class="fw-semibold text-primary">@CurrencyFormatter.FormatKr(policies.TotalPrice)</div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="text-uppercase text-muted tiny-label">Per mnd (estimert)</div>
                    <div class="fw-semibold">@CurrencyFormatter.FormatKr(policies.TotalPrice / 12m)</div>
                </div>
            </div>

            <div class="progress mt-3 policy-progress" role="progressbar"
                 aria-valuemin="0" aria-valuemax="100" aria-valuenow="@UsedPercent">
                <div class="progress-bar @ProgressBarClass" style="width:@UsedPercent%"></div>
            </div>

            <p class="mt-3 mb-0 small text-muted">
                Oppdatert til @(DateTime.UtcNow.ToLocalTime().ToString("g"))
            </p>
        </div>
    </div>
}
else
{
    <div class="alert alert-info mt-4">
        Ingen aktiv forsikring lastet eller mangler kilometergrense.
    </div>
}




@code {
    [Parameter] public int VehicleId { get; set; } 
    private InsuranseModel policies = new();

    private async Task HandleSubmit()
    {
        if (VehicleId != 0)
        {
            await InsuranceService.UpdateInsurance(policies);
        }
        else
        {           
            await InsuranceService.CreateInsurance(policies);
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if (VehicleId != 0)
        {
            policies = await InsuranceService.GetRemainingMilage(VehicleId) ?? new();
        }
        else
        {            
            policies = new InsuranseModel();            
        }
    }

    private int Remaining => policies.RemainingMileage ?? 0;
    private int Limit => policies.AnnualMileageLimit;
    private int Used => Limit > 0 ? Math.Max(0, Limit - Remaining) : 0;
    private int UsedPercent => Limit > 0 ? (int)Math.Clamp(Math.Round((double)Used / Limit * 100), 0, 100) : 0;

    private string StatusBadgeClass =>
      policies.IsActive ? "bg-success" : "bg-secondary";

    private string ProgressBarClass =>
        UsedPercent switch
        {
            >= 90 => "bg-danger",
            >= 75 => "bg-warning text-dark",
            _ => "bg-success"
        };
}
