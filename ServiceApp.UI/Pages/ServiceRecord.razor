@page "/servicerecord/{id:int}"
@page "/servicerecord/create/{vehicleId:int}"
@page "/servicerecord/create"
@inject IServiceRecordService ServiceRecordService
@inject IImageUploadService ImageUploadService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3>Service</h3>

<div class="mb-3">
    <ServiceRecordForm  Id="Id" OnServiceRecordDeleted="DeleteServiceRecord" OnServiceRecordSaved="HandleValidSubmit" serviceRecord="serviceRecord" />
</div>
<ServiceRecordImages ImageIds="imageIds" ImageSasUrls="imageSasUrls" OnFileSelected="OnInputFileChange" />


@code {
    private IBrowserFile? selectedFile;
    private ServiceRecordModel serviceRecord = new();
    private List<int>? imageIds; 
    private VehicleInventoryModel? selectedInventory;
    private decimal addQuantity = 1m;
    private Dictionary<int, string> imageSasUrls = new();



    [Parameter] public int VehicleId { get; set; }
    [Parameter] public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            serviceRecord = await ServiceRecordService.GetServiceRecordByIdAsync(Id); 
            await GetImageIds();

            if (serviceRecord.Parts is { Count: > 0 })
            {
                serviceRecord.UsedParts = serviceRecord.Parts
                    .Where(p => p.VehicleInventoryId.HasValue)
                    .Select(p => new UsedPartModel
                    {
                        RowId = Guid.NewGuid(),
                        VehicleInventoryId = p.VehicleInventoryId,
                        Quantity = Math.Max(1, p.Quantity),
                        UnitCost = p.Price,               
                        Description = p.Description,
                        Name= p.Name
                    })
                    .ToList();
            }
        }
        else
        {
            serviceRecord = new ServiceRecordModel();
            if (VehicleId > 0) serviceRecord.VehicleId = VehicleId;

        }

        // reset add-part state
       
        selectedInventory = null;
        addQuantity = 1m;
        RecalcCost();
    }


    private async Task GetImageIds()
    {
        imageIds = await ServiceRecordService.GetServiceRecordImageIdsAsync(Id);
        imageSasUrls = imageIds != null
            ? await ServiceRecordService.GetImageSasUrlsAsync(imageIds)
            : new Dictionary<int, string>();
    }

    private void OnUsedPartQuantityChanged()
    {
        // Normalize any invalid quantities and recalc
        foreach (var p in serviceRecord.UsedParts)
            if (p.Quantity <= 0) p.Quantity = 1m;
        RecalcCost();
    }

    private decimal CalculatedPartsTotal()
        => serviceRecord.UsedParts
            .Where(p => p.UnitCost.HasValue && p.Quantity > 0)
            .Sum(p => p.UnitCost!.Value * p.Quantity);

    private void RecalcCost()
    {
        var partsTotal = CalculatedPartsTotal();
        if (partsTotal > 0) serviceRecord.Cost = partsTotal;
    }

    private async Task HandleValidSubmit()
    {
        serviceRecord.UsedParts = serviceRecord.UsedParts
            .Where(p => p.VehicleInventoryId is int && p.Quantity > 0)
            .ToList();

        if (Id > 0)
        {           
            if (selectedFile != null)
            {
                await ServiceRecordService.UpdateServiceRecordWithImageAsync(serviceRecord, selectedFile);
            }
            else
            {
                await ServiceRecordService.UpdateServiceRecordAsync(serviceRecord);
            }
        }        
        else
        {
            if (selectedFile != null)              
            {
                await ServiceRecordService.CreateServiceRecordWithImageAsync(serviceRecord, selectedFile);
            }
            else
            {
                await ServiceRecordService.CreateServiceRecordAsync(serviceRecord);
            }
        }
        
        NavigateToServiceRecords();
    }

    private async Task DeleteServiceRecord()
    {
        if (Id > 0)
        {
            await ServiceRecordService.DeleteServiceRecordAsync(Id);
            NavigateToServiceRecords();
        }
    }

    private void NavigateToServiceRecords()
    {
        var vid = serviceRecord.VehicleId;
        NavigationManager.NavigateTo($"/servicerecords/{vid}");
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

   
}