@page "/servicerecords/{vehicleId:int}"
@inject IServiceRecordService ServiceRecordService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3>ServiceRecords</h3>

<button class="btn btn-primary mb-3" @onclick="NavigateToCreate">Create New Service Record</button>

<div class="page-section mt-3">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-3">
        @if (serviceRecords is { Count: > 0 })
        {
            @foreach (var record in serviceRecords)
            {
                <div class="col">
                    <div class="card card-service h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="date-pill">@record.ServiceDate.ToShortDateString()</span>
                                @if (!string.IsNullOrWhiteSpace(record.ServiceTypeName))
                                {
                                    <span class="badge badge-service rounded-pill">@record.ServiceTypeName</span>
                                }
                            </div>

                            <h5 class="card-title mt-2 mb-1">@record.VehicleName</h5>

                            @if (!string.IsNullOrWhiteSpace(record.Description))
                            {
                                <p class="card-text text-muted line-clamp-3 mb-3">@record.Description</p>
                            }

                            <div class="metrics">
                                <div class="text-muted small">
                                    Kilometer: <strong>@record.Mileage</strong>
                                </div>
                                <div class="cost-chip">
                                    @record.Cost
                                </div>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent border-0 pt-0 d-flex justify-content-end gap-2">
                            <NavLink class="btn btn-sm btn-outline-secondary" href="@($"/servicerecord/{record.Id}")">
                                <i class="bi bi-pencil me-1"></i> Edit
                            </NavLink>
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick="() => OpenDelete(record)">
                                <i class="bi bi-trash me-1"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col">
                <div class="alert alert-info mb-0">No service records found.</div>
            </div>
        }
    </div>
</div>

<ConfirmModal TContext="ServiceRecordModel"
              Show="@showDelete"
              ShowChanged="@OnModalChanged"
              Title="Slette service?"
              ConfirmText="Slett"
              CancelText="Avbryt"
              Context="recordToDelete"
              OnConfirm="DeleteConfirmed"
              OnCancel="DeleteCanceled"
              Size="sm"
              ContextRenderer="DeleteContextFragment" />

@code {
    private List<ServiceRecordModel> serviceRecords = new();
    [Parameter] public int VehicleId { get; set; }

    private bool showDelete;
    private ServiceRecordModel? recordToDelete;
    private bool loading;

    // RenderFragment<T> separated so it is valid attribute content
    private RenderFragment<ServiceRecordModel> DeleteContextFragment => record => @<div>
        <p>Du er i ferd med å slette service <strong>#@record.Id</strong> datert @record.ServiceDate.ToShortDateString().</p>
        <p class="mb-0 text-danger">Denne handlingen kan ikke angres.</p>
    </div>;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        loading = true;
        try
        {
            serviceRecords = await ServiceRecordService.GetServiceRecordsAsync(VehicleId);
        }
        finally
        {
            loading = false;
        }
    }

    private void NavigateToCreate()
        => NavigationManager.NavigateTo("/servicerecord/create");

    private void OpenDelete(ServiceRecordModel record)
    {
        recordToDelete = record;
        showDelete = true;
    }

    private Task OnModalChanged(bool value)
    {
        showDelete = value;
        if (!value)
            recordToDelete = null;
        return Task.CompletedTask;
    }

    private async Task DeleteConfirmed(ServiceRecordModel? record)
    {
        if (record is null) return;
        try
        {
            await ServiceRecordService.DeleteServiceRecordAsync(record.Id);
            serviceRecords.RemoveAll(r => r.Id == record.Id);
        }
        catch (Exception)
        {
            // Optionally log or show toast
        }
        finally
        {
            recordToDelete = null;
            showDelete = false;
            StateHasChanged();
        }
    }

    private Task DeleteCanceled(ServiceRecordModel? _)
    {
        recordToDelete = null;
        return Task.CompletedTask;
    }
}
