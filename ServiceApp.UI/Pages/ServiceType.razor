@page "/servicetype"
@page "/servicetype/{id:int}"
@inject IServiceTypeService ServiceTypeService
@inject NavigationManager NavigationManager

<h3>ServiceType</h3>

<EditForm Model="serviceType" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="Name" class="form-label">Service Type</label>
        <InputText id="Name" class="form-control" @bind-Value="serviceType.Name" />
        <ValidationMessage For="@(() => serviceType.Name)" />
    </div>

    <button type="submit" class="btn btn-primary">Lagre</button>
    <button type="button" class="btn btn-secondary mx-2" @onclick="NavigateToServiceTypes">Avbryt</button>
    @if (Id > 0)
    {
        <button type="button" class="btn btn-danger mx-2" @onclick="DeleteServiceType">Slett</button>
    }

</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }

    private ServiceTypeModel serviceType = new ServiceTypeModel();

    protected override async Task OnParametersSetAsync()
    {
        if(Id > 0)
        {
            var result = await ServiceTypeService.GetServiceTypeByIdAsync(Id);
            if (result != null)
            {
                serviceType = result;
            }
            else
            {
                serviceType = new ServiceTypeModel();
            }
        }
        else
        {
            serviceType = new ServiceTypeModel();
        }
        
    }

    private async Task HandleValidSubmit()
    {
        if (Id > 0)
        {
            await ServiceTypeService.UpdateServiceTypeAsync(serviceType);
        }
        else
        {
            await ServiceTypeService.CreateServiceTypeAsync(serviceType);
        }
        NavigateToServiceTypes();
    }

    private async Task DeleteServiceType()
    {
        if (Id > 0)
        {
            await ServiceTypeService.DeleteServiceTypeAsync(Id);
            NavigateToServiceTypes();
        }
    }

    private void NavigateToServiceTypes()
    {
        NavigationManager.NavigateTo("/ServiceTypes");
    }
}
