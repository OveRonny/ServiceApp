@page "/vehicles"
@page "/vehicles/owner/{OwnerId:int}"
@inject IVehicleService vehicleService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3 class="page-title">Kjøretøy</h3>

<button type="button" class="btn btn-primary" @onclick="CreateVehicle">Nytt kjøretøy</button>

<div class="page-section mt-3">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-3">
        @if (vehicleModels != null && vehicleModels.Count > 0)
        {
            @foreach (var vehicle in vehicleModels)
            {
                <div class="col">
                    <div class="card card-service h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="date-pill">@vehicle.DateCreated.ToShortDateString()</span>
                                @if (!string.IsNullOrWhiteSpace(vehicle.LicensePlate))
                                {
                                    <span class="badge badge-service rounded-pill">@vehicle.LicensePlate</span>
                                }
                            </div>

                            <h5 class="card-title mt-2 mb-1">
                                <a class="text-decoration-none" href="vehicle/@vehicle.Id">@vehicle.Make @vehicle.Model</a>
                            </h5>

                            @if (!string.IsNullOrWhiteSpace(vehicle.FirstName))
                            {
                                <div class="text-muted small mb-2">@vehicle.FirstName</div>
                            }

                            <div class="d-flex flex-wrap gap-3 text-muted small">
                                <span>Årsmodell: <strong>@vehicle.Year</strong></span>
                                <span>Farge: <strong>@vehicle.Color</strong></span>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent d-flex gap-2">
                            <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/consumptionrecords/{vehicle.Id}"))">Se forbruk</button>
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/consumptionrecord/create/vehicle/{vehicle.Id}"))">Legg til forbruk</button>
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/vehicleinventories/{vehicle.Id}"))">Deler</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/servicerecord/create/{vehicle.Id}"))">Service</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/servicerecords/{vehicle.Id}"))">Alle Servicer</button>
							<button type="button" class="btn btn-outline-secondary btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/insurance/{vehicle.Id}"))">Forsikring</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col">
                <div class="alert alert-info mb-0">No vehicles found.</div>
            </div>
        }
    </div>
</div>

@code {
    private List<VehicleModel> vehicleModels = new List<VehicleModel>();

    [Parameter] public int? OwnerId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        vehicleModels = OwnerId.HasValue
            ? await vehicleService.GetVehiclesByOwnerIdAsync(OwnerId.Value)
            : await vehicleService.GetAllVehiclesAsync();
    }

    private void CreateVehicle()
    {
        NavigationManager.NavigateTo("vehicle");
    }
}
