@inject NavigationManager NavigationManager


<EditForm Model="serviceRecord" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label" for="vehicle">Kjøretøy</label>
        <div class="form-group">
            <VehicleDropdown @bind-selectedVehicleId="serviceRecord.VehicleId" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label" for="ServiceCompanyId">Verksted</label>
        <div class="form-group">
            <ServiceCompanyDropdown @bind-SelectedServiceCompanyId="serviceRecord.ServiceCompanyId" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label" for="ServiceTypeId">Service type</label>
        <div class="form-group">
            <ServiceTypeDropdown @bind-SelectedServiceTypeId="serviceRecord.ServiceTypeId" />
        </div>
    </div>

    <div class="mb-3">
        <div class="form-group">
            <label class="form-label" for="serviceDate">Dato</label>
            <InputDate id="serviceDate" @bind-Value="serviceRecord.ServiceDate" class="form-control" />
        </div>
    </div>

    <div class="mb-3">
        <div class="form-group">
            <label class="form-label" for="description">Beskrivelse</label>
            <InputTextArea id="description" @bind-Value="serviceRecord.Description" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label class="form-label" for="cost">Sum</label>
        <InputNumber id="cost" @bind-Value="serviceRecord.Cost" class="form-control" />
        <small class="text-muted">Beregnet: @(CalculatedPartsTotal().ToString("C"))</small>
    </div>

    <div class="form-group">
        <label class="form-label" for="mileage">Kilometer</label>
        <InputNumber id="mileage" @bind-Value="serviceRecord.Mileage" class="form-control" />
    </div>

   

    <div class="d-flex gap-2 mt-3 mb-3">
        <button type="submit" class="btn btn-primary">Lagre</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        @if (Id > 0)
        {
            <button type="button" class="btn btn-danger" @onclick="DeleteServiceRecord">Delete</button>
        }
    </div>
    <div class="mb-3">
        <ServiceRecordUsedParts VehicleId="serviceRecord.VehicleId" @bind-UsedParts="serviceRecord.UsedParts" />
    </div>
</EditForm>

@code {
    [Parameter]
    public ServiceRecordModel serviceRecord { get; set; } = new();
    [Parameter]
    public int Id { get; set; }

    private decimal CalculatedPartsTotal()
    => serviceRecord.UsedParts
        .Where(p => p.UnitCost.HasValue && p.Quantity > 0)
        .Sum(p => p.UnitCost!.Value * p.Quantity);

    [Parameter]
    public EventCallback<ServiceRecordModel> OnServiceRecordSaved { get; set; }
    [Parameter]
    public EventCallback<ServiceRecordModel> OnServiceRecordDeleted { get; set; }

    private async Task HandleValidSubmit()
    {     
        await OnServiceRecordSaved.InvokeAsync(serviceRecord);
    }

    private async Task DeleteServiceRecord()
    {        
        await OnServiceRecordDeleted.InvokeAsync(serviceRecord);
    }

    private void Cancel()
    {
        NavigatetoServiceRecords();
    }

    private void NavigatetoServiceRecords()
    {
        NavigationManager.NavigateTo($"/servicerecords/{serviceRecord.VehicleId}");
    }
}